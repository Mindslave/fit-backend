// Code generated by sqlc. DO NOT EDIT.
// source: exercises_workouts.sql

package postgresql

import (
	"context"
	"database/sql"
)

const getAllExercisesInWorkout = `-- name: GetAllExercisesInWorkout :many
SELECT e.id, name
FROM exercises_workouts ew
INNER JOIN exercise e ON e.id = ew.exercise_id
WHERE ew.workout_id = $1
`

type GetAllExercisesInWorkoutRow struct {
	ID   int64          `json:"id"`
	Name sql.NullString `json:"name"`
}

func (q *Queries) GetAllExercisesInWorkout(ctx context.Context, workoutID sql.NullInt64) ([]GetAllExercisesInWorkoutRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllExercisesInWorkout, workoutID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllExercisesInWorkoutRow
	for rows.Next() {
		var i GetAllExercisesInWorkoutRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllWorkoutsWithExercise = `-- name: GetAllWorkoutsWithExercise :many
select w.id
FROM exercises_workouts ew
INNER JOIN workouts w ON w.id = ew.workout_id
WHERE ew.workout_id = $1
`

func (q *Queries) GetAllWorkoutsWithExercise(ctx context.Context, workoutID sql.NullInt64) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getAllWorkoutsWithExercise, workoutID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
