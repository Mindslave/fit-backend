// Code generated by sqlc. DO NOT EDIT.
// source: exercises.sql

package postgresql

import (
	"context"
	"database/sql"
)

const createExercise = `-- name: CreateExercise :one
INSERT INTO exercise (
  weight, 
  reps, 
  time_between_reps, 
  explanation,
  required_equipment,
  muscle_area
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, weight, reps, time_between_reps, explanation, required_equipment, muscle_area
`

type CreateExerciseParams struct {
	Weight            sql.NullInt32  `json:"weight"`
	Reps              sql.NullInt32  `json:"reps"`
	TimeBetweenReps   sql.NullInt32  `json:"time_between_reps"`
	Explanation       sql.NullString `json:"explanation"`
	RequiredEquipment sql.NullString `json:"required_equipment"`
	MuscleArea        sql.NullString `json:"muscle_area"`
}

func (q *Queries) CreateExercise(ctx context.Context, arg CreateExerciseParams) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, createExercise,
		arg.Weight,
		arg.Reps,
		arg.TimeBetweenReps,
		arg.Explanation,
		arg.RequiredEquipment,
		arg.MuscleArea,
	)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Weight,
		&i.Reps,
		&i.TimeBetweenReps,
		&i.Explanation,
		&i.RequiredEquipment,
		&i.MuscleArea,
	)
	return i, err
}

const getExercise = `-- name: GetExercise :one
SELECT id, weight, reps, time_between_reps, explanation, required_equipment, muscle_area FROM exercise
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetExercise(ctx context.Context, id int64) (Exercise, error) {
	row := q.db.QueryRowContext(ctx, getExercise, id)
	var i Exercise
	err := row.Scan(
		&i.ID,
		&i.Weight,
		&i.Reps,
		&i.TimeBetweenReps,
		&i.Explanation,
		&i.RequiredEquipment,
		&i.MuscleArea,
	)
	return i, err
}

const listExercises = `-- name: ListExercises :many
SELECT id, weight, reps, time_between_reps, explanation, required_equipment, muscle_area FROM exercise
ORDER BY name
LIMIT $1
OFFSET $2
`

type ListExercisesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListExercises(ctx context.Context, arg ListExercisesParams) ([]Exercise, error) {
	rows, err := q.db.QueryContext(ctx, listExercises, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Exercise
	for rows.Next() {
		var i Exercise
		if err := rows.Scan(
			&i.ID,
			&i.Weight,
			&i.Reps,
			&i.TimeBetweenReps,
			&i.Explanation,
			&i.RequiredEquipment,
			&i.MuscleArea,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
